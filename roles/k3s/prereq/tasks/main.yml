---
- name: Record SELinux state
  set_fact:
    k3s_selinux_state: 'disabled'

- block:
  - block:
    - name: Install yum-utils for yum-config-manager
      yum:
        name: yum-utils
        state: installed
    - name: Enable rhel-7-server-extras-rpms repo
      command: yum-config-manager --enable rhel-7-server-extras-rpms
    when: ansible_distribution in ['Red Hat Enterprise Linux'] and ansible_distribution_major_version == '7'

  - name: Create /etc/yum.repos.d/rancher-k3s-common.repo
    copy:
      content: |
        [rancher-k3s-common-{{ rancher_rpm_channel }}]
        name=Rancher K3s Common ({{ rancher_rpm_channel }})
        baseurl=https://{{ rancher_rpm_site }}/k3s/{{ rancher_rpm_channel }}/common/centos/{{ ansible_distribution_major_version }}/noarch
        enabled=1
        gpgcheck=1
        gpgkey=https://{{ rancher_rpm_site }}/public.key
      dest: /etc/yum.repos.d/rancher-k3s-common.repo

  - name: Install K3s SELinux related packages
    yum:
      name:
        - container-selinux
        - selinux-policy-base
      state: installed

  # Has to be a separate yum call from the above, otherwise yum's conflict resolution won't succeed
  - name: Install k3s-selinux package
    yum:
      name: k3s-selinux
      # k3s-selinux package might need older version of container-selinux.
      allow_downgrade: true
      state: installed

  - name: Record SELinux state
    set_fact:
      k3s_selinux_state: 'enforcing'
  when:
    - k3s_selinux_enable
    - ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux','RedHat']

- name: Set SELinux state
  selinux:
    policy: "targeted"
    state: "{{ k3s_selinux_state }}"

- name: Disable firewalld
  systemd:
    name: firewalld
    state: stopped
    enabled: no
  # firewalld might not be installed
  failed_when: false
  when: ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux','RedHat']

- name: Enable IPv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: yes

- name: Enable IPv6 forwarding
  sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: yes
  when: ansible_all_ipv6_addresses

- name: Add br_netfilter to /etc/modules-load.d/
  copy:
    content: "br_netfilter"
    dest: /etc/modules-load.d/br_netfilter.conf
    mode: "u=rw,g=,o="
  when: ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux','RedHat']

- name: Load br_netfilter
  modprobe:
    name: br_netfilter
    state: present
  when: ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux','RedHat']

- name: Set bridge-nf-call-iptables (just to be sure)
  sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
    reload: yes
  when: ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux','RedHat']
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables

- name: Add /usr/local/bin to sudo secure_path
  lineinfile:
    line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'
    regexp: "Defaults(\\s)*secure_path(\\s)*="
    state: present
    insertafter: EOF
    path: /etc/sudoers
    validate: 'visudo -cf %s'
  when: ansible_distribution in ['CentOS', 'Red Hat Enterprise Linux','RedHat']

# Currently, kubectl isn't designed with swap space in mind.
# But this will change, see https://github.com/kubernetes/enhancements/issues/2400.
- name: Disable swap devices and files in /etc/fstab (if any)
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\s+swap\s+.*)$'
    replace: '# \1'

- name: Check for active swap devices or files
  command: swapon --show --noheadings
  register: swapon_show
  changed_when: false

- name: Disable active swap devices and files (if any)
  command: swapoff --all
  changed_when: true
  when: swapon_show.stdout_lines | length > 0
