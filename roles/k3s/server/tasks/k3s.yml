---

- name: Move downloaded k3s binary into place
  command:
    cmd: mv -f {{ k3s_bin_download_path }} /usr/local/bin/k3s
  changed_when: true
  when: k3s_binary_changed

# This task will be skipped if k3s.service already exists. So the initialization will only be performed if it hasn't
# been done yet.
- name: Initialize first server
  block:
    # This will remove the transient service if systemd kept it around because it failed.
    - name: Clean previous runs of k3s-init (remove failed transient service)
      command: systemctl reset-failed k3s-init
      failed_when: false
      changed_when: false

    - name: Init cluster inside the transient k3s-init service
      vars:
        server_init_args: >-
          {% if k3s_selinux_enable %}
          --selinux
          {% endif %}
          {% if node_ip is defined %}
          --node-ip {{ node_ip }}
          {% endif %}
          {% if inventory_hostname == groups['server'][0] %}
            --cluster-init
          {% else %}
            --server https://{{ server_apiserver_endpoint }}:6443
          {% endif %}
          --token {{ k3s_token }}
          {% for arg in extra_server_args %}
          {{ arg }}
          {% endfor %}
      command:
        cmd: "systemd-run -p RestartSec=2 \
                          -p Restart=on-failure \
                          --unit=k3s-init \
                          k3s server {{ server_init_args }}"
        creates: "{{ systemd_dir }}/k3s.service"

    - name: Verification
      block:
        - name: Verify this host actually joined (check k3s-init.service if this fails)
          command:
            cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
          register: nodes
          until: nodes.rc == 0 and nodes.stdout.find(ansible_nodename) != -1
          retries: 20
          delay: 10
          changed_when: false
          when: not ansible_check_mode
      always:
        - name: Kill the temporary service used for initialization
          systemd:
            name: k3s-init
            state: stopped
          failed_when: false
          when: not ansible_check_mode

        # This will remove the transient service if systemd kept it around because it failed.
        - name: Clean up the transient k3s-init service
          command: systemctl reset-failed k3s-init
          failed_when: false
          changed_when: false
  when: inventory_hostname == groups['server'][0] and datastore_endpoint is not defined

- name: Copy K3s service environment file
  register: k3s_service_env
  template:
    src: "k3s.service.env.j2"
    dest: "{{ systemd_dir }}/k3s.service.env"
    owner: root
    group: root
    mode: 0600

- name: Copy K3s service file
  register: k3s_service
  template:
    src: "k3s.service.j2"
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0644

- name: Enable and check K3s service
  systemd:
    name: k3s
    daemon_reload: "{{ 'yes' if k3s_service_env.changed or k3s_service.changed else 'no' }}"
    state: "{{ 'restarted' if k3s_service_env.changed or k3s_service.changed or k3s_binary_changed else 'started' }}"
    enabled: yes

- name: Verify this host actually joined
  command:
    cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
  register: nodes
  until: nodes.rc == 0 and nodes.stdout.find(ansible_nodename) != -1
  retries: 20
  delay: 10
  changed_when: false
  when: not ansible_check_mode

- name: Wait for node-token
  wait_for:
    path: /var/lib/rancher/k3s/server/node-token

- name: Read node-token from server
  slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token

- name: Store server node-token
  add_host:
    name:   "k3s_global_facts"
    token:  "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Create directory .kube
  file:
    path: "~{{ ansible_user }}/.kube"
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

# The whole kubeconfig creation is not really check mode compatible, so skip is completely.
- block:
    - name: "Create temporary kubeconfig file"
      tempfile:
        state: file
        prefix: kubeconfig-{{ ansible_user }}-
      register: kubeconfig_ansible_tempfile
      changed_when: false

    - name: "Copy system kubeconfig to temporary kubeconfig"
      copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ kubeconfig_ansible_tempfile.path }}"
        remote_src: yes
        owner: "{{ ansible_user }}"
        mode: "u=rw,g=,o="
      changed_when: false

    - name: Configure kubeconfig to use https://{{ apiserver_endpoint }}:6443
      command: >-
        /usr/local/bin/k3s kubectl config set-cluster default
          --server=https://{{ apiserver_endpoint }}:6443
          --kubeconfig {{ kubeconfig_ansible_tempfile.path }}
      changed_when: false

    - name: Stat temporary version of kubeconfig
      stat:
        path: "{{ kubeconfig_ansible_tempfile.path }}"
      register: kubeconfig_ansible_stat
      changed_when: false

    - name: Stat existing version of kubeconfig
      stat:
        path: "~{{ ansible_user }}/.kube/config"
      register: kubeconfig_stat
      changed_when: false

    - name: Move new kubeconfig into place
      command: mv -f {{ kubeconfig_ansible_tempfile.path }} ~{{ ansible_user }}/.kube/config
      changed_when: true
      when:
        - not kubeconfig_stat.stat.exists or (kubeconfig_stat.stat.checksum is defined and
            kubeconfig_stat.stat.checksum != kubeconfig_ansible_stat.stat.checksum)
            
    - name: Fetch kubeconfig
      fetch:
        src: "~{{ ansible_user }}/.kube/config"
        dest: "{{ output_base_path }}/{{ kubeconfig_path }}"
        flat: true
      run_once: true
      when: kubeconfig_path is defined

    - name: Set mode on kubeconfig
      local_action:
        module: file
        path: "{{ output_base_path }}/{{ kubeconfig_path }}"
        mode: "u=rw,g=,o="
      run_once: true
      when: kubeconfig_path is defined
      
  when: not ansible_check_mode

# The file module will fail if the source of the symlink doesn't exist even when running in check mode.
# Check here if the binary exists so that check mode will work properly if the binary exists.
- name: Stat k3s binary
  stat:
    path: /usr/local/bin/k3s
  register: k3s_stat
  changed_when: false
  check_mode: false

- name: Create kubectl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link
  when: k3s_stat.stat.exists

- name: Create crictl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link
  when: k3s_stat.stat.exists

- name: Create ctr symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/ctr
    state: link
  when: k3s_stat.stat.exists
